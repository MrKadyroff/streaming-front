import { useState, useEffect } from 'react';
import { BannerData } from '../PromoBanner';
import { Match } from '../../types';
import { Stream } from './StreamsManagement';
import {
    getStreams,
    getUsers,
    getAds,
    getReports,
    getHealth,
    createAd,
    updateAd as apiUpdateAd,
    deleteAd as apiDeleteAd,
    activateAd,
    deactivateAd,
    CreateAdDto
} from '../../api';

export const useAdminData = () => {
    const [serverHealth, setServerHealth] = useState<string>('–ü—Ä–æ–≤–µ—Ä–∫–∞...');
    const [apiUsers, setApiUsers] = useState<any[]>([]);
    const [apiReports, setApiReports] = useState<any[]>([]);
    const [hlsStreams, setHlsStreams] = useState<any[]>([]);
    const [allStreams, setAllStreams] = useState<Stream[]>([]);
    const [allAds, setAllAds] = useState<BannerData[]>([]);
    const [filteredAds, setFilteredAds] = useState<BannerData[]>([]);
    const [adsFilter, setAdsFilter] = useState<'all' | 'active' | 'inactive'>('all');
    const [adsSort, setAdsSort] = useState<'priority' | 'title' | 'date'>('priority');
    const [adsLoading, setAdsLoading] = useState<boolean>(false);
    const [streamsLoading, setStreamsLoading] = useState<boolean>(false);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        loadApiData();
    }, []);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã
    useEffect(() => {


        let filtered = [...allAds];

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        if (adsFilter === 'active') {
            filtered = filtered.filter(ad => ad.isActive);

        } else if (adsFilter === 'inactive') {
            filtered = filtered.filter(ad => !ad.isActive);

        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        filtered.sort((a, b) => {
            switch (adsSort) {
                case 'priority':
                    return (b.priority || 0) - (a.priority || 0);
                case 'title':
                    return a.title.localeCompare(b.title);
                case 'date':
                    return new Date(b.startDate || 0).getTime() - new Date(a.startDate || 0).getTime();
                default:
                    return 0;
            }
        });

        console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:', filtered);
        setFilteredAds(filtered);
    }, [allAds, adsFilter, adsSort]);

    const loadApiData = async () => {
        setAdsLoading(true);
        try {


            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞

            await getHealth();
            setServerHealth('–û–Ω–ª–∞–π–Ω');


            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API...');
            const [streamsRes, usersRes, reportsRes, adsRes] = await Promise.all([
                getStreams().catch(err => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∏–º–æ–≤:', err);
                    return { data: { streams: [] } };
                }),
                getUsers().catch(err => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
                    return { data: [] };
                }),
                getReports().catch(err => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤:', err);
                    return { data: [] };
                }),
                getAds().catch(err => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–ª–∞–º—ã:', err);
                    return { data: [] };
                })
            ]);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º—ã
            if (streamsRes?.data?.streams && Array.isArray(streamsRes.data.streams)) {
                setAllStreams(streamsRes.data.streams);
            } else {
                setAllStreams([]);
            }

            setApiUsers(usersRes?.data || []);
            setApiReports(reportsRes?.data || []);
            setHlsStreams([]);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π

            let adsArray = [];

            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"ads": [...], "total": 6}
            if (adsRes && adsRes.data && Array.isArray(adsRes.data.ads)) {

                adsArray = adsRes.data.ads;
            } else if (adsRes && Array.isArray(adsRes.data)) {

                adsArray = adsRes.data;
            } else {

                if (adsRes && adsRes.data) {

                }
                adsArray = [];
            }



            if (adsArray && adsArray.length > 0) {


                const adsData = adsArray.map((ad: any, index: number) => {

                    const processed = {
                        id: ad.id || ad._id || `mock-${Date.now()}-${index}`,
                        title: ad.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                        type: ad.type || 'vertical',
                        imageUrl: ad.imageUrl || '',
                        gifUrl: ad.imageUrl || ad.gifUrl || '',
                        clickUrl: ad.clickUrl || '',
                        isActive: ad.status === 'active',
                        priority: ad.priority || 1,
                        startDate: ad.startDate || new Date().toISOString(),
                        endDate: ad.endDate || new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
                        position: ad.position || (ad.type === 'horizontal' ? 'header' : 'sidebar')
                    };

                    return processed;
                });


                setAllAds(adsData);

            } else {

                setAllAds([]);

            }

        } catch (error) {

            setServerHealth('–û—Ñ—Ñ–ª–∞–π–Ω');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            if (error instanceof Error) {

            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ HTTP –æ—à–∏–±–∫–æ–π
            if (error && typeof error === 'object' && 'response' in error) {
                const httpError = error as any;
                console.error('üåê –û—à–∏–±–∫–∞ HTTP:', httpError.response?.status);
                console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', httpError.response?.data);
            }
        } finally {
            setAdsLoading(false);
        }
    };

    const handleDeleteAd = async (id: string) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?')) {
            setAdsLoading(true);
            try {
                // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ API
                await apiDeleteAd(id);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                setAllAds(prev => prev.filter(ad => ad.id !== id));

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                await loadApiData();

                console.log('–†–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
            } finally {
                setAdsLoading(false);
            }
        }
    };

    const handleToggleAd = async (ad: BannerData) => {
        setAdsLoading(true);
        try {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ API
            if (ad.isActive) {
                await deactivateAd(ad.id);
            } else {
                await activateAd(ad.id);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const updatedAd = { ...ad, isActive: !ad.isActive };
            setAllAds(prev => prev.map(a => a.id === ad.id ? updatedAd : a));

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await loadApiData();

            console.log(`–†–µ–∫–ª–∞–º–∞ ${updatedAd.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–ª–∞–º—ã:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–ª–∞–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
        } finally {
            setAdsLoading(false);
        }
    };

    const createAdFromForm = async (formData: any, editingAd: BannerData | null) => {
        setAdsLoading(true);
        try {
            const dto: CreateAdDto = {
                title: formData.title,
                type: formData.type,
                position: (formData.type === 'horizontal' ? 'header' : 'sidebar') as 'header' | 'sidebar',
                imageUrl: formData.imageUrl || formData.gifUrl || '',
                clickUrl: formData.clickUrl || '',
                startDate: new Date().toISOString(),
                endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
                priority: 1,
                targetAudience: 'sports'
            };


            if (editingAd) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–µ–∫–ª–∞–º—É —á–µ—Ä–µ–∑ API
                await apiUpdateAd(editingAd.id, dto);
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const updatedAd: BannerData = {
                    ...editingAd,
                    title: formData.title,
                    type: formData.type,
                    imageUrl: formData.imageUrl,
                    gifUrl: formData.gifUrl,
                    clickUrl: formData.clickUrl,
                    position: dto.position,
                    priority: dto.priority,
                    startDate: dto.startDate,
                    endDate: dto.endDate
                };
                setAllAds(prev => prev.map(ad => ad.id === editingAd.id ? updatedAd : ad));
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∫–ª–∞–º—É —á–µ—Ä–µ–∑ API
                const response = await createAd(dto);

                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const newAd: BannerData = {
                    id: (response.data?.ad?.id || response.data?.id || Date.now()).toString(),
                    title: formData.title,
                    type: formData.type,
                    imageUrl: formData.imageUrl,
                    gifUrl: formData.gifUrl,
                    clickUrl: formData.clickUrl,
                    isActive: false, // –ù–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è
                    position: dto.position,
                    priority: dto.priority,
                    startDate: dto.startDate,
                    endDate: dto.endDate
                };
                setAllAds(prev => [...prev, newAd]);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await loadApiData();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
            throw error;
        } finally {
            setAdsLoading(false);
        }
    };

    const loadStreams = async () => {
        setStreamsLoading(true);
        try {
            const streamsRes = await getStreams();
            if (streamsRes?.data?.streams && Array.isArray(streamsRes.data.streams)) {
                setAllStreams(streamsRes.data.streams);
            } else {
                setAllStreams([]);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∏–º–æ–≤:', error);
            setAllStreams([]);
        } finally {
            setStreamsLoading(false);
        }
    };

    return {
        serverHealth,
        apiUsers,
        apiReports,
        hlsStreams,
        allStreams,
        streamsLoading,
        allAds,
        filteredAds,
        adsFilter,
        adsSort,
        adsLoading,
        setAdsFilter,
        setAdsSort,
        loadApiData,
        loadStreams,
        handleDeleteAd,
        handleToggleAd,
        createAdFromForm
    };
};
