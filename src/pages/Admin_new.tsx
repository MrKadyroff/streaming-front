import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAds } from '../contexts/AdsContext';
import { useData } from '../contexts/DataContext';
import { useAuth } from '../contexts/AuthContext';
import { AdData } from '../components/AdBanner';
import MatchModal from '../components/MatchModal';
import { Match } from '../types';
import {
    getStreams,
    getUsers,
    getAds,
    getMatches,
    getReports,
    getHealth,
    createMatch,
    updateMatch as apiUpdateMatch,
    deleteMatch as apiDeleteMatch,
    createAd,
    updateAd as apiUpdateAd,
    deleteAd as apiDeleteAd,
    activateAd,
    deactivateAd,
    CreateAdDto,
    CreateMatchDto
} from '../api';
import './Admin.css';

// ...existing code from Admin.tsx (component logic, state, useEffect, handlers, and return JSX)...
const Admin: React.FC = () => {
    const { addAd, updateAd, deleteAd } = useAds();
    const { matches, addMatch, updateMatch, deleteMatch } = useData();
    const { logout } = useAuth();
    const navigate = useNavigate();
    const [activeTab, setActiveTab] = useState<'dashboard' | 'matches' | 'ads' | 'users' | 'reports' | 'hls'>('dashboard');
    const [showAdForm, setShowAdForm] = useState(false);
    const [showMatchModal, setShowMatchModal] = useState(false);
    const [editingAd, setEditingAd] = useState<AdData | null>(null);
    const [editingMatch, setEditingMatch] = useState<Match | null>(null);
    const [serverHealth, setServerHealth] = useState<string>('–ü—Ä–æ–≤–µ—Ä–∫–∞...');
    const [apiUsers, setApiUsers] = useState<any[]>([]);
    const [apiReports, setApiReports] = useState<any[]>([]);
    const [hlsStreams, setHlsStreams] = useState<any[]>([]);
    const [allAds, setAllAds] = useState<AdData[]>([]);
    const [filteredAds, setFilteredAds] = useState<AdData[]>([]);
    const [adsFilter, setAdsFilter] = useState<'all' | 'active' | 'inactive'>('active');
    const [adsSort, setAdsSort] = useState<'priority' | 'title' | 'date'>('priority');
    const [adsLoading, setAdsLoading] = useState<boolean>(false);
    const [formData, setFormData] = useState({
        title: '',
        imageUrl: '',
        gifUrl: '',
        clickUrl: '',
        type: 'vertical' as 'vertical' | 'square' | 'horizontal',
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        loadApiData();
    }, []);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã
    useEffect(() => {
        console.log('–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º—ã. –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:', allAds.length);
        console.log('–í—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', allAds);

        let filtered = [...allAds];

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
        if (adsFilter === 'active') {
            filtered = filtered.filter(ad => ad.isActive);
            console.log('–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ "–∞–∫—Ç–∏–≤–Ω—ã–µ":', filtered.length);
        } else if (adsFilter === 'inactive') {
            filtered = filtered.filter(ad => !ad.isActive);
            console.log('–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ "–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ":', filtered.length);
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        filtered.sort((a, b) => {
            switch (adsSort) {
                case 'priority':
                    return (b.priority || 0) - (a.priority || 0);
                case 'title':
                    return a.title.localeCompare(b.title);
                case 'date':
                    return new Date(b.startDate || 0).getTime() - new Date(a.startDate || 0).getTime();
                default:
                    return 0;
            }
        });

        console.log('–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫:', filtered);
        setFilteredAds(filtered);
    }, [allAds, adsFilter, adsSort]);

    const loadApiData = async () => {
        setAdsLoading(true);
        try {
            console.log('üî• –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Å API...');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
            console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞...');
            await getHealth();
            setServerHealth('–û–Ω–ª–∞–π–Ω');
            console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –≤ —Å–µ—Ç–∏');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            console.log('üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API...');
            const [streamsRes, usersRes, reportsRes, adsRes] = await Promise.all([
                getStreams().catch(err => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∏–º–æ–≤:', err);
                    return { data: [] };
                }),
                getUsers().catch(err => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
                    return { data: [] };
                }),
                getReports().catch(err => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤:', err);
                    return { data: [] };
                }),
                getAds().catch(err => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–ª–∞–º—ã:', err);
                    return { data: [] };
                })
            ]);

            console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã API –∑–∞–ø—Ä–æ—Å–æ–≤:');
            console.log('- –°—Ç—Ä–∏–º—ã:', streamsRes);
            console.log('- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:', usersRes);
            console.log('- –û—Ç—á–µ—Ç—ã:', reportsRes);
            console.log('- üéØ –†–ï–ö–õ–ê–ú–ê:', adsRes);

            setApiUsers(usersRes?.data || []);
            setApiReports(reportsRes?.data || []);
            setHlsStreams([]);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
            console.log('üéØ === –û–ë–†–ê–ë–û–¢–ö–ê –†–ï–ö–õ–ê–ú–´ ===');
            console.log('üîç –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API –¥–ª—è —Ä–µ–∫–ª–∞–º—ã:', JSON.stringify(adsRes, null, 2));

            let adsArray = [];

            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
            if (adsRes && adsRes.data && Array.isArray(adsRes.data.ads)) {
                console.log('üìÅ –ù–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ –≤ adsRes.data.ads');
                adsArray = adsRes.data.ads;
            } else if (adsRes && Array.isArray(adsRes.data)) {
                console.log('üìÅ –ù–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ –≤ adsRes.data');
                adsArray = adsRes.data;
            } else if (adsRes && Array.isArray(adsRes)) {
                console.log('üìÅ adsRes —Å–∞–º —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
                adsArray = adsRes;
            } else if (adsRes && adsRes.data && Array.isArray(adsRes.data.data)) {
                console.log('üìÅ –ù–∞–π–¥–µ–Ω –º–∞—Å—Å–∏–≤ –≤ adsRes.data.data');
                adsArray = adsRes.data.data;
            } else {
                console.log('üö® –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Å—Å–∏–≤ —Ä–µ–∫–ª–∞–º—ã. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:');
                console.log('üîç typeof adsRes:', typeof adsRes);
                console.log('üîç adsRes keys:', adsRes ? Object.keys(adsRes) : 'adsRes is null/undefined');
                if (adsRes && adsRes.data) {
                    console.log('üîç typeof adsRes.data:', typeof adsRes.data);
                    console.log('üîç adsRes.data keys:', Object.keys(adsRes.data));
                }
            }

            console.log('üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ä–µ–∫–ª–∞–º—ã:', adsArray);
            console.log('üìè –î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞:', adsArray ? adsArray.length : 'undefined');

            if (adsArray && adsArray.length > 0) {
                console.log('‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è...');
                console.log('üîç –ü–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:', adsArray[0]);

                const adsData = adsArray.map((ad: any, index: number) => {
                    console.log(`üè∑Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${index + 1}:`, ad);
                    const processed = {
                        id: ad.id || ad._id || `mock-${Date.now()}-${index}`,
                        title: ad.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                        type: ad.type || 'vertical',
                        imageUrl: ad.imageUrl || '',
                        gifUrl: ad.imageUrl || ad.gifUrl || '',
                        clickUrl: ad.clickUrl || '',
                        isActive: ad.status === 'active' || Boolean(ad.isActive !== undefined ? ad.isActive : ad.active),
                        priority: ad.priority || 1,
                        startDate: ad.startDate || new Date().toISOString(),
                        endDate: ad.endDate || new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
                        position: ad.position || (ad.type === 'horizontal' ? 'header' : 'sidebar')
                    };
                    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ ${index + 1}:`, processed);
                    return processed;
                });

                console.log('üéØ –§–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–ª–∞–º—ã:', adsData);
                setAllAds(adsData);
                console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: ${adsData.length}`);
            } else {
                console.log('‚ö†Ô∏è –ú–∞—Å—Å–∏–≤ —Ä–µ–∫–ª–∞–º—ã –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                setAllAds([]);
                console.log('üí≠ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
                console.log('   - –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
                console.log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API');
                console.log('   - –û—à–∏–±–∫–∞ –≤ API –∑–∞–ø—Ä–æ—Å–µ');
            }

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å API:', error);
            setServerHealth('–û—Ñ—Ñ–ª–∞–π–Ω');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            if (error instanceof Error) {
                console.error('üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message);
                console.error('üìö Stack trace:', error.stack);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ HTTP –æ—à–∏–±–∫–æ–π
            if (error && typeof error === 'object' && 'response' in error) {
                const httpError = error as any;
                console.error('üåê –û—à–∏–±–∫–∞ HTTP:', httpError.response?.status);
                console.error('üìÑ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', httpError.response?.data);
            }
        } finally {
            setAdsLoading(false);
        }
    };

    const handleSubmitAd = async (e: React.FormEvent) => {
        e.preventDefault();
        setAdsLoading(true);
        try {
            const dto: CreateAdDto = {
                title: formData.title,
                type: formData.type,
                position: formData.type === 'horizontal' ? 'header' : 'sidebar',
                imageUrl: formData.imageUrl || formData.gifUrl || '',
                clickUrl: formData.clickUrl || '',
                startDate: new Date().toISOString(),
                endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(),
                priority: 1,
                targetAudience: 'sports'
            };

            if (editingAd) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–µ–∫–ª–∞–º—É —á–µ—Ä–µ–∑ API
                await apiUpdateAd(editingAd.id, dto);
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const updatedAd: AdData = {
                    ...editingAd,
                    title: formData.title,
                    type: formData.type,
                    imageUrl: formData.imageUrl,
                    gifUrl: formData.gifUrl,
                    clickUrl: formData.clickUrl,
                    position: dto.position,
                    priority: dto.priority,
                    startDate: dto.startDate,
                    endDate: dto.endDate
                };
                setAllAds(prev => prev.map(ad => ad.id === editingAd.id ? updatedAd : ad));
                setEditingAd(null);
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–µ–∫–ª–∞–º—É —á–µ—Ä–µ–∑ API
                const response = await createAd(dto);
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                const newAd: AdData = {
                    id: response.data.id || Date.now().toString(),
                    title: formData.title,
                    type: formData.type,
                    imageUrl: formData.imageUrl,
                    gifUrl: formData.gifUrl,
                    clickUrl: formData.clickUrl,
                    isActive: true,
                    position: dto.position,
                    priority: dto.priority,
                    startDate: dto.startDate,
                    endDate: dto.endDate
                };
                setAllAds(prev => [...prev, newAd]);
            }

            setFormData({ title: '', imageUrl: '', gifUrl: '', clickUrl: '', type: 'vertical' });
            setShowAdForm(false);

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await loadApiData();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
        } finally {
            setAdsLoading(false);
        }
    };

    const handleDeleteMatch = async (id: string) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –º–∞—Ç—á?')) {
            try {
                await apiDeleteMatch(id);
                deleteMatch(id);
                loadApiData();
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
            }
        }
    };

    const handleMatchSubmit = async (matchData: Omit<Match, 'id'>) => {
        try {
            const dto: CreateMatchDto = {
                homeTeam: typeof matchData.homeTeam === 'string' ? matchData.homeTeam : matchData.homeTeam?.name || matchData.player1,
                awayTeam: typeof matchData.awayTeam === 'string' ? matchData.awayTeam : matchData.awayTeam?.name || matchData.player2,
                date: matchData.date || new Date().toISOString(),
                time: matchData.time || '00:00',
                tournament: matchData.tournament || '',
                sport: matchData.sport || 'football',
                venue: matchData.venue || '',
                status: matchData.status || 'upcoming'
            };

            if (editingMatch) {
                await apiUpdateMatch(editingMatch.id, dto);
                updateMatch(editingMatch.id, matchData);
            } else {
                await createMatch(dto);
                addMatch(matchData);
            }
            setShowMatchModal(false);
            setEditingMatch(null);
            loadApiData();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–∞—Ç—á–∞:', error);
        }
    };

    const handleLogout = () => {
        logout();
        navigate('/');
    };

    const handleDeleteAd = async (id: string) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?')) {
            setAdsLoading(true);
            try {
                // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ API
                await apiDeleteAd(id);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                setAllAds(prev => prev.filter(ad => ad.id !== id));

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                await loadApiData();

                console.log('–†–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∫–ª–∞–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
            } finally {
                setAdsLoading(false);
            }
        }
    };

    const handleToggleAd = async (ad: AdData) => {
        setAdsLoading(true);
        try {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ API
            if (ad.isActive) {
                await deactivateAd(ad.id);
            } else {
                await activateAd(ad.id);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const updatedAd = { ...ad, isActive: !ad.isActive };
            setAllAds(prev => prev.map(a => a.id === ad.id ? updatedAd : a));

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await loadApiData();

            console.log(`–†–µ–∫–ª–∞–º–∞ ${updatedAd.isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–ª–∞–º—ã:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–ª–∞–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
        } finally {
            setAdsLoading(false);
        }
    };

    const handleEditAd = (ad: AdData) => {
        setEditingAd(ad);
        setFormData({
            title: ad.title,
            imageUrl: ad.imageUrl || '',
            gifUrl: ad.gifUrl || '',
            clickUrl: ad.clickUrl || '',
            type: ad.type
        });
        setShowAdForm(true);
    };

    return (
        <div className="admin-page">
            <div className="admin-header">
                <div className="admin-header-content">
                    <div className="admin-title">
                        <h1>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
                        <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π</p>
                    </div>
                    <button className="logout-btn" onClick={handleLogout}>
                        –í—ã–π—Ç–∏
                    </button>
                </div>
            </div>

            <main className="admin-content">
                {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º */}
                <div className="tabs-nav">
                    <button
                        className={`tab-btn ${activeTab === 'dashboard' ? 'active' : ''}`}
                        onClick={() => setActiveTab('dashboard')}
                    >
                        –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    </button>
                    <button
                        className={`tab-btn ${activeTab === 'matches' ? 'active' : ''}`}
                        onClick={() => setActiveTab('matches')}
                    >
                        –ú–∞—Ç—á–∏
                    </button>
                    <button
                        className={`tab-btn ${activeTab === 'ads' ? 'active' : ''}`}
                        onClick={() => setActiveTab('ads')}
                    >
                        –†–µ–∫–ª–∞–º–∞
                    </button>
                    <button
                        className={`tab-btn ${activeTab === 'users' ? 'active' : ''}`}
                        onClick={() => setActiveTab('users')}
                    >
                        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                    </button>
                    <button
                        className={`tab-btn ${activeTab === 'reports' ? 'active' : ''}`}
                        onClick={() => setActiveTab('reports')}
                    >
                        –û—Ç—á–µ—Ç—ã
                    </button>
                    <button
                        className={`tab-btn ${activeTab === 'hls' ? 'active' : ''}`}
                        onClick={() => setActiveTab('hls')}
                    >
                        HLS –ü–æ—Ç–æ–∫–∏
                    </button>
                </div>

                {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
                {activeTab === 'dashboard' && (
                    <div className="tab-content">
                        <div className="admin-grid">
                            <div className="admin-card">
                                <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞–º–∏</h3>
                                <p>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</p>
                                <button
                                    className="admin-btn"
                                    onClick={() => setShowMatchModal(true)}
                                >
                                    –û—Ç–∫—Ä—ã—Ç—å
                                </button>
                            </div>

                            <div className="admin-card">
                                <h3>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π</h3>
                                <p>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤</p>
                                <button
                                    className="admin-btn"
                                    onClick={() => setShowAdForm(true)}
                                >
                                    –û—Ç–∫—Ä—ã—Ç—å
                                </button>
                            </div>
                            <div className="admin-card">
                                <h3>–ê–∫—Ç–∏–≤–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞</h3>
                                <p>–ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π</p>
                                {allAds.filter(a => a.isActive).length === 0 ? (
                                    <div className="empty-state small">
                                        <div className="empty-icon">üì¢</div>
                                        <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã</p>
                                    </div>
                                ) : (
                                    <ul className="mini-list">
                                        {allAds.filter(a => a.isActive).slice(0, 5).map(ad => (
                                            <li key={ad.id} className="mini-list-item">
                                                <span className="mini-title">{ad.title}</span>
                                                <div className="mini-actions">
                                                    <button className="btn btn-xs" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" onClick={() => { setActiveTab('ads'); handleEditAd(ad); }}>‚úèÔ∏è</button>
                                                    <button className="btn btn-xs" title="–í—ã–∫–ª—é—á–∏—Ç—å" onClick={() => handleToggleAd(ad)}>üîÑ</button>
                                                    <button className="btn btn-xs btn-danger" title="–£–¥–∞–ª–∏—Ç—å" onClick={() => handleDeleteAd(ad.id)}>üóëÔ∏è</button>
                                                </div>
                                            </li>
                                        ))}
                                    </ul>
                                )}
                            </div>
                        </div>

                        {/* –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                        <div className="admin-info">
                            <h2>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h2>
                            <div className="info-grid">
                                <div className="info-item">
                                    <span className="info-label">–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:</span>
                                    <span className={`info-value ${serverHealth === '–û–Ω–ª–∞–π–Ω' ? 'status-online' : 'status-offline'}`}>
                                        {serverHealth}
                                    </span>
                                </div>
                                <div className="info-item">
                                    <span className="info-label">–í—Å–µ–≥–æ –º–∞—Ç—á–µ–π:</span>
                                    <span className="info-value">{matches.length}</span>
                                </div>
                                <div className="info-item">
                                    <span className="info-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤:</span>
                                    <span className="info-value">{matches.filter(m => m.isLive).length}</span>
                                </div>
                                <div className="info-item">
                                    <span className="info-label">API –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</span>
                                    <span className="info-value">{apiUsers.length}</span>
                                </div>
                                <div className="info-item">
                                    <span className="info-label">API –û—Ç—á–µ—Ç—ã:</span>
                                    <span className="info-value">{apiReports.length}</span>
                                </div>
                                <div className="info-item">
                                    <span className="info-label">HLS –°—Ç—Ä–∏–º—ã:</span>
                                    <span className="info-value">{hlsStreams.length}</span>
                                </div>
                                <div className="info-item">
                                    <span className="info-label">–í—Å–µ–≥–æ —Ä–µ–∫–ª–∞–º—ã:</span>
                                    <span className="info-value">{allAds.length}</span>
                                </div>
                                <div className="info-item">
                                    <span className="info-label">–ê–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã:</span>
                                    <span className="info-value">{allAds.filter(ad => ad.isActive).length}</span>
                                </div>
                            </div>
                        </div>

                        {/* Match Modal */}
                        <MatchModal
                            isOpen={showMatchModal}
                            onClose={() => {
                                setShowMatchModal(false);
                                setEditingMatch(null);
                            }}
                            onSubmit={handleMatchSubmit}
                            editMatch={editingMatch}
                        />

                        {/* Ads Management Section */}
                        {showAdForm && (
                            <div className="admin-modal">
                                <div className="modal-content">
                                    <div className="modal-header">
                                        <h3>{editingAd ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É' : '–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É'}</h3>
                                        <button
                                            className="close-btn"
                                            onClick={() => {
                                                setShowAdForm(false);
                                                setEditingAd(null);
                                                setFormData({ title: '', imageUrl: '', gifUrl: '', clickUrl: '', type: 'vertical' });
                                            }}
                                        >
                                            ‚úï
                                        </button>
                                    </div>

                                    <form onSubmit={handleSubmitAd} className="ad-form">
                                        <div className="form-group">
                                            <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                                            <input
                                                type="text"
                                                value={formData.title}
                                                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                                                required
                                            />
                                        </div>

                                        <div className="form-group">
                                            <label>–¢–∏–ø –±–∞–Ω–Ω–µ—Ä–∞:</label>
                                            <select
                                                value={formData.type}
                                                onChange={(e) => setFormData(prev => ({ ...prev, type: e.target.value as any }))}
                                            >
                                                <option value="vertical">–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π (160x600)</option>
                                                <option value="square">–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π (160x160)</option>
                                                <option value="horizontal">–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π (728x90)</option>
                                            </select>
                                        </div>

                                        <div className="form-group">
                                            <label>URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</label>
                                            <input
                                                type="url"
                                                value={formData.imageUrl}
                                                onChange={(e) => setFormData(prev => ({ ...prev, imageUrl: e.target.value }))}
                                                placeholder="https://example.com/image.jpg"
                                            />
                                        </div>

                                        <div className="form-group">
                                            <label>URL GIF:</label>
                                            <input
                                                type="url"
                                                value={formData.gifUrl}
                                                onChange={(e) => setFormData(prev => ({ ...prev, gifUrl: e.target.value }))}
                                                placeholder="https://example.com/animation.gif"
                                            />
                                        </div>

                                        <div className="form-group">
                                            <label>–°—Å—ã–ª–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ:</label>
                                            <input
                                                type="url"
                                                value={formData.clickUrl}
                                                onChange={(e) => setFormData(prev => ({ ...prev, clickUrl: e.target.value }))}
                                                placeholder="https://example.com/target"
                                            />
                                        </div>

                                        <div className="form-actions">
                                            <button type="submit" disabled={adsLoading}>
                                                {adsLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : (editingAd ? '–û–±–Ω–æ–≤–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å')}
                                            </button>
                                            <button
                                                type="button"
                                                onClick={() => {
                                                    setShowAdForm(false);
                                                    setEditingAd(null);
                                                }}
                                                disabled={adsLoading}
                                            >
                                                –û—Ç–º–µ–Ω–∞
                                            </button>
                                        </div>
                                    </form>
                                </div>
                            </div>
                        )}
                    </div>
                )}

                {/* –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ç—á–∞–º–∏ */}
                {activeTab === 'matches' && (
                    <div className="tab-content">
                        <div className="matches-management">
                            <div className="section-header">
                                <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç—á–∞–º–∏</h2>
                                <button
                                    className="btn btn-primary add-btn"
                                    onClick={() => {
                                        setEditingMatch(null);
                                        setShowMatchModal(true);
                                    }}
                                >
                                    –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç—á
                                </button>
                            </div>

                            <div className="matches-container">
                                {matches.length === 0 ? (
                                    <div className="empty-state">
                                        <div className="empty-icon">üìã</div>
                                        <h3>–ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                                        <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –º–∞—Ç—á –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                                        <button
                                            className="btn btn-primary"
                                            onClick={() => setShowMatchModal(true)}
                                        >
                                            –°–æ–∑–¥–∞—Ç—å –º–∞—Ç—á
                                        </button>
                                    </div>
                                ) : (
                                    <div className="matches-table-container">
                                        <table className="matches-table">
                                            <thead>
                                                <tr>
                                                    <th>–ö–æ–º–∞–Ω–¥—ã</th>
                                                    <th>–¢—É—Ä–Ω–∏—Ä</th>
                                                    <th>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</th>
                                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {matches.map((match: Match) => (
                                                    <tr key={match.id} className="match-row">
                                                        <td className="teams-cell">
                                                            <div className="teams-info">
                                                                <span className="team-name">{match.player1}</span>
                                                                <span className="vs-text">–ø—Ä–æ—Ç–∏–≤</span>
                                                                <span className="team-name">{match.player2}</span>
                                                            </div>
                                                        </td>
                                                        <td className="tournament-cell">
                                                            <div className="tournament-info">
                                                                <div className="tournament-name">{match.tournament}</div>
                                                                <div className="sport-name">{match.sport}</div>
                                                            </div>
                                                        </td>
                                                        <td className="datetime-cell">
                                                            <div className="datetime-info">
                                                                <div className="date">{new Date(match.date).toLocaleDateString('ru-RU')}</div>
                                                                <div className="time">{match.time}</div>
                                                            </div>
                                                        </td>
                                                        <td className="status-cell">
                                                            <span className={`status-badge ${match.status}`}>
                                                                {match.status === 'live' ? '–í –≠–§–ò–†–ï' :
                                                                    match.status === 'upcoming' ? '–°–∫–æ—Ä–æ' :
                                                                        match.status === 'finished' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : match.status}
                                                            </span>
                                                        </td>
                                                        <td className="actions-cell">
                                                            <div className="actions-group">
                                                                <button
                                                                    className="btn btn-outline btn-sm"
                                                                    onClick={() => {
                                                                        setEditingMatch(match);
                                                                        setShowMatchModal(true);
                                                                    }}
                                                                    title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á"
                                                                >
                                                                    –ò–∑–º–µ–Ω–∏—Ç—å
                                                                </button>
                                                                <button
                                                                    className={`btn btn-sm ${match.status === 'live' ? 'btn-warning' : 'btn-success'}`}
                                                                    onClick={() => {
                                                                        const newStatus = match.status === 'live' ? 'upcoming' : 'live';
                                                                        updateMatch(match.id, { ...match, status: newStatus, isLive: newStatus === 'live' });
                                                                    }}
                                                                    title={match.status === 'live' ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é" : "–ù–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é"}
                                                                >
                                                                    {match.status === 'live' ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}
                                                                </button>
                                                                <button
                                                                    className="btn btn-danger btn-sm"
                                                                    onClick={() => handleDeleteMatch(match.id)}
                                                                    title="–£–¥–∞–ª–∏—Ç—å –º–∞—Ç—á"
                                                                >
                                                                    –£–¥–∞–ª–∏—Ç—å
                                                                </button>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                ))}
                                            </tbody>
                                        </table>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                )}

                {/* –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º–æ–π */}
                {activeTab === 'ads' && (
                    <div className="tab-content">
                        <div className="ads-management">
                            <div className="section-header">
                                <div className="section-title-group">
                                    <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π</h2>
                                    <div className="section-sub">
                                        <span>–í—Å–µ–≥–æ: {allAds.length}</span>
                                        <span> ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {allAds.filter(a => a.isActive).length}</span>
                                        <span> ‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ: {allAds.filter(a => !a.isActive).length}</span>
                                    </div>
                                </div>
                                <div className="section-actions">
                                    <button
                                        className="btn"
                                        onClick={() => setAdsFilter('all')}
                                        title="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ"
                                    >
                                        –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
                                    </button>
                                    <button
                                        className="btn"
                                        onClick={() => setAdsFilter('active')}
                                        title="–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ"
                                    >
                                        –ê–∫—Ç–∏–≤–Ω—ã–µ
                                    </button>
                                    <button
                                        className="btn"
                                        onClick={() => setAdsFilter('inactive')}
                                        title="–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"
                                    >
                                        –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ
                                    </button>
                                    <button
                                        className="btn btn-outline"
                                        onClick={loadApiData}
                                        disabled={adsLoading}
                                        title="–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫"
                                    >
                                        {adsLoading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
                                    </button>
                                    <button
                                        className="btn btn-primary add-btn"
                                        onClick={() => {
                                            setEditingAd(null);
                                            setFormData({ title: '', imageUrl: '', gifUrl: '', clickUrl: '', type: 'vertical' });
                                            setShowAdForm(true);
                                        }}
                                    >
                                        –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É
                                    </button>
                                </div>
                            </div>

                            {/* –§–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ */}
                            <div className="filters-section">
                                <div className="filter-group">
                                    <label>–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É:</label>
                                    <select
                                        value={adsFilter}
                                        onChange={(e) => setAdsFilter(e.target.value as 'all' | 'active' | 'inactive')}
                                        className="filter-select"
                                    >
                                        <option value="all">–í—Å–µ</option>
                                        <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
                                        <option value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
                                    </select>
                                </div>
                                <div className="filter-group">
                                    <label>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:</label>
                                    <select
                                        value={adsSort}
                                        onChange={(e) => setAdsSort(e.target.value as 'priority' | 'title' | 'date')}
                                        className="filter-select"
                                    >
                                        <option value="priority">–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É</option>
                                        <option value="title">–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é</option>
                                        <option value="date">–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è</option>
                                    </select>
                                </div>
                            </div>

                            <div className="ads-container">
                                {filteredAds.length === 0 ? (
                                    <div className="empty-state">
                                        <div className="empty-icon">üì¢</div>
                                        <h3>–†–µ–∫–ª–∞–º–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                                        <p>
                                            {adsFilter === 'active' ? '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π' :
                                                adsFilter === 'inactive' ? '–ù–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π' :
                                                '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'}
                                        </p>
                                        <button
                                            className="btn btn-primary"
                                            onClick={() => setShowAdForm(true)}
                                        >
                                            –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º—É
                                        </button>
                                    </div>
                                ) : (
                                    <>
                                        {/* Desktop Table */}
                                        <div className="ads-table-container">
                                            <table className="ads-table">
                                                <thead>
                                                    <tr>
                                                        <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                                        <th>–°—Ç–∞—Ç—É—Å</th>
                                                        <th>–ü–ª–µ–π—Å–º–µ–Ω—Ç</th>
                                                        <th>–î–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—è</th>
                                                        <th>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</th>
                                                        <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    {filteredAds.map((ad: AdData) => (
                                                        <tr key={ad.id} className="ad-row">
                                                            <td className="title-cell">
                                                                <div className="ad-title-info">
                                                                    <span className="ad-title">{ad.title}</span>
                                                                    <div className="ad-preview">
                                                                        {(ad.imageUrl || ad.gifUrl) && (
                                                                            <img
                                                                                src={ad.imageUrl || ad.gifUrl}
                                                                                alt={ad.title}
                                                                                className="ad-thumbnail"
                                                                            />
                                                                        )}
                                                                    </div>
                                                                </div>
                                                            </td>
                                                            <td className="status-cell">
                                                                <span className={`status-badge ${ad.isActive ? 'active' : 'inactive'}`}>
                                                                    {ad.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}
                                                                </span>
                                                            </td>
                                                            <td className="placement-cell">
                                                                <div className="placement-info">
                                                                    <div className="placement-type">{ad.type}</div>
                                                                    <div className="placement-position">{ad.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                                                                </div>
                                                            </td>
                                                            <td className="dates-cell">
                                                                <div className="dates-info">
                                                                    <div className="start-date">
                                                                        –°: {ad.startDate ? new Date(ad.startDate).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                                                    </div>
                                                                    <div className="end-date">
                                                                        –î–æ: {ad.endDate ? new Date(ad.endDate).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                                                    </div>
                                                                </div>
                                                            </td>
                                                            <td className="priority-cell">
                                                                <span className="priority-value">{ad.priority || 1}</span>
                                                            </td>
                                                            <td className="actions-cell">
                                                                <div className="actions-group">
                                                                    <button
                                                                        className="btn btn-outline btn-sm"
                                                                        onClick={() => handleEditAd(ad)}
                                                                        title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É"
                                                                        disabled={adsLoading}
                                                                    >
                                                                        ‚úèÔ∏è
                                                                    </button>
                                                                    <button
                                                                        className={`btn btn-sm ${ad.isActive ? 'btn-warning' : 'btn-success'}`}
                                                                        onClick={() => handleToggleAd(ad)}
                                                                        title={ad.isActive ? "–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å" : "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"}
                                                                        disabled={adsLoading}
                                                                    >
                                                                        üîÑ
                                                                    </button>
                                                                    <button
                                                                        className="btn btn-danger btn-sm"
                                                                        onClick={() => handleDeleteAd(ad.id)}
                                                                        title="–£–¥–∞–ª–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"
                                                                        disabled={adsLoading}
                                                                    >
                                                                        ‚ùå
                                                                    </button>
                                                                </div>
                                                            </td>
                                                        </tr>
                                                    ))}
                                                </tbody>
                                            </table>
                                        </div>

                                        {/* Mobile Cards */}
                                        <div className="ads-cards-container mobile-only">
                                            {filteredAds.map((ad: AdData) => (
                                                <div key={ad.id} className="ad-card">
                                                    <div className="ad-card-header">
                                                        <h4 className="ad-card-title">{ad.title}</h4>
                                                        <span className={`ad-card-status status-badge ${ad.isActive ? 'active' : 'inactive'}`}>
                                                            {ad.isActive ? '‚úÖ' : '‚ùå'}
                                                        </span>
                                                    </div>

                                                    {(ad.imageUrl || ad.gifUrl) && (
                                                        <div className="ad-card-preview">
                                                            <img
                                                                src={ad.imageUrl || ad.gifUrl}
                                                                alt={ad.title}
                                                                className="ad-thumbnail"
                                                            />
                                                        </div>
                                                    )}

                                                    <div className="ad-card-info">
                                                        <div className="ad-card-info-item">
                                                            <span className="ad-card-info-label">–¢–∏–ø:</span>
                                                            <span className="ad-card-info-value">{ad.type}</span>
                                                        </div>
                                                        <div className="ad-card-info-item">
                                                            <span className="ad-card-info-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</span>
                                                            <span className="ad-card-info-value">{ad.priority || 1}</span>
                                                        </div>
                                                        <div className="ad-card-info-item">
                                                            <span className="ad-card-info-label">–ü–µ—Ä–∏–æ–¥:</span>
                                                            <span className="ad-card-info-value">
                                                                {ad.startDate ? new Date(ad.startDate).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                                                {' - '}
                                                                {ad.endDate ? new Date(ad.endDate).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                                                            </span>
                                                        </div>
                                                        <div className="ad-card-info-item">
                                                            <span className="ad-card-info-label">–ü–ª–µ–π—Å–º–µ–Ω—Ç:</span>
                                                            <span className="ad-card-info-value">{ad.position || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</span>
                                                        </div>
                                                    </div>

                                                    <div className="ad-card-actions">
                                                        <button
                                                            className="btn btn-outline btn-sm"
                                                            onClick={() => handleEditAd(ad)}
                                                            disabled={adsLoading}
                                                        >
                                                            ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å
                                                        </button>
                                                        <button
                                                            className={`btn btn-sm ${ad.isActive ? 'btn-warning' : 'btn-success'}`}
                                                            onClick={() => handleToggleAd(ad)}
                                                            disabled={adsLoading}
                                                        >
                                                            üîÑ {ad.isActive ? '–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                                                        </button>
                                                        <button
                                                            className="btn btn-danger btn-sm"
                                                            onClick={() => handleDeleteAd(ad.id)}
                                                            disabled={adsLoading}
                                                        >
                                                            ‚ùå –£–¥–∞–ª–∏—Ç—å
                                                        </button>
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </>
                                )}
                            </div>
                        </div>
                    </div>
                )}

                {/* –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ */}
                {activeTab === 'users' && (
                    <div className="tab-content">
                        <div className="users-management">
                            <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h2>
                            {apiUsers.length === 0 ? (
                                <div className="empty-state">
                                    <div className="empty-icon">üë•</div>
                                    <h3>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                                    <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</p>
                                </div>
                            ) : (
                                <div className="users-list">
                                    {apiUsers.map((user, index) => (
                                        <div key={index} className="user-card">
                                            <div className="user-info">
                                                <h4>{user.name || user.username || `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${index + 1}`}</h4>
                                                <p>{user.email || 'Email –Ω–µ —É–∫–∞–∑–∞–Ω'}</p>
                                                <p>–†–æ–ª—å: {user.role || 'user'}</p>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞–º–∏ */}
                {activeTab === 'reports' && (
                    <div className="tab-content">
                        <div className="reports-management">
                            <h2>–û—Ç—á–µ—Ç—ã —Å–∏—Å—Ç–µ–º—ã</h2>
                            {apiReports.length === 0 ? (
                                <div className="empty-state">
                                    <div className="empty-icon">üìä</div>
                                    <h3>–û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                                    <p>–û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</p>
                                </div>
                            ) : (
                                <div className="reports-list">
                                    {apiReports.map((report, index) => (
                                        <div key={index} className="report-card">
                                            <h4>{report.title || `–û—Ç—á–µ—Ç ${index + 1}`}</h4>
                                            <p>{report.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                                            <small>{report.date || '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}</small>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                )}

                {/* –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è HLS –ø–æ—Ç–æ–∫–∞–º–∏ */}
                {activeTab === 'hls' && (
                    <div className="tab-content">
                        <div className="hls-management">
                            <h2>HLS –ü–æ—Ç–æ–∫–∏</h2>
                            {hlsStreams.length === 0 ? (
                                <div className="empty-state">
                                    <div className="empty-icon">üìπ</div>
                                    <h3>HLS –ø–æ—Ç–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                                    <p>–ü–æ—Ç–æ–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å –ø—Ä–∏ –∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</p>
                                </div>
                            ) : (
                                <div className="streams-list">
                                    {hlsStreams.map((stream, index) => (
                                        <div key={index} className="stream-card">
                                            <h4>{stream.title || `–ü–æ—Ç–æ–∫ ${index + 1}`}</h4>
                                            <p>URL: {stream.url}</p>
                                            <p>–°—Ç–∞—Ç—É—Å: {stream.status || '–∞–∫—Ç–∏–≤–µ–Ω'}</p>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                    </div>
                )}
            </main>
        </div>
    );
};

export default Admin;
