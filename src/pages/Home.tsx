import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useData } from '../contexts/DataContext';
import { Match } from '../types';
import MatchPlayer from '../components/MatchPlayer';
import FootballMatchCard from '../components/FootballMatchCard';
import HLSPlayer from '../components/HLSPlayer';
import BannersDebug from '../components/BannersDebug';
import { streamApi, Stream } from '../services/streamApi';
import './Home.css';

const Home: React.FC = () => {
    const {
        liveMatches,
        upcomingMatches
    } = useData();

    const [selectedMatch, setSelectedMatch] = useState<Match | null>(null);
    const [activeStream, setActiveStream] = useState<Stream | null>(null);
    const [allStreams, setAllStreams] = useState<Stream[]>([]);
    const [upcomingStreams, setUpcomingStreams] = useState<Stream[]>([]);
    const [streamLoading, setStreamLoading] = useState<boolean>(true);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
    useEffect(() => {
        const loadActiveStreams = async () => {
            setStreamLoading(true);
            try {
                console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∏–º—ã...');
                const streams = await streamApi.getActiveStreams();
                console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∏–º—ã:', streams);

                setAllStreams(streams);

                // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç—Ä–∏–º
                if (streams.length > 0) {
                    setActiveStream(streams[0]);
                    console.log('–í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º:', streams[0]);
                } else {
                    setActiveStream(null);
                    console.log('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤');
                }
            } catch (error) {
                console.error('Error loading active streams:', error);
                setActiveStream(null);
                setAllStreams([]);
            } finally {
                setStreamLoading(false);
            }
        };

        const loadUpcomingStreams = async () => {
            try {
                console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å—Ç—Ä–∏–º—ã...');
                const upcoming = await streamApi.getUpcomingStreams();
                console.log('–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å—Ç—Ä–∏–º—ã:', upcoming);
                setUpcomingStreams(upcoming);
            } catch (error) {
                console.error('Error loading upcoming streams:', error);
                setUpcomingStreams([]);
            }
        };

        loadActiveStreams();
        loadUpcomingStreams();

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ç–æ–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        const interval = setInterval(() => {
            loadActiveStreams();
            loadUpcomingStreams();
        }, 30000);

        return () => clearInterval(interval);
    }, []);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π live –º–∞—Ç—á –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        if (liveMatches.length > 0 && !selectedMatch) {
            setSelectedMatch(liveMatches[0]);
        }
    }, [liveMatches, selectedMatch]);

    const handleMatchClick = (match: Match) => {
        setSelectedMatch(match);
    };

    const closePlayer = () => {
        setSelectedMatch(null);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    const formatStreamTime = (startTime: string) => {
        const date = new Date(startTime);
        return date.toLocaleTimeString('ru-RU', {
            hour: '2-digit',
            minute: '2-digit'
        });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
    const formatStreamDate = (startTime: string) => {
        const date = new Date(startTime);
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);

        if (date.toDateString() === today.toDateString()) {
            return '–°–µ–≥–æ–¥–Ω—è';
        } else if (date.toDateString() === tomorrow.toDateString()) {
            return '–ó–∞–≤—Ç—Ä–∞';
        } else {
            return date.toLocaleDateString('ru-RU', {
                day: '2-digit',
                month: '2-digit'
            });
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    const getStreamStatusText = (status: string) => {
        switch (status) {
            case 'live': return '–í —ç—Ñ–∏—Ä–µ';
            case 'upcoming': return '–°–∫–æ—Ä–æ';
            case 'ended': return '–ó–∞–≤–µ—Ä—à–µ–Ω';
            case 'offline': return '–û—Ñ–ª–∞–π–Ω';
            default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    };

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É—Ç–±–æ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
    const activeLiveMatches = liveMatches.filter((match: Match) =>
        match.sport === 'football' &&
        match.isLive &&
        match.status === 'live'
    );

    // –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞ —Ñ–æ–Ω–µ –ø–æ–ª—è
    const upcomingFootballMatches = upcomingMatches.filter((match: Match) =>
        match.sport === 'football'
    ).slice(0, 1); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–π

    const otherUpcomingMatches = upcomingMatches.filter((match: Match) =>
        match.sport === 'football'
    ).slice(1); // –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö

    return (
        <div className="home-page">
            {/* <BannersDebug /> */}
            <main className="home-content">
                {/* HLS Video Player Section */}
                <div className="hls-player-section">
                    <div className="section-header">
                        <h2>
                            <span className="soccer-emoji">‚öΩ</span>
                            –û–Ω–ª–∞–π–Ω —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è
                            {streamLoading && <span className="loading-indicator">‚è≥</span>}
                            {activeStream && (
                                <span className="stream-count">
                                    ({allStreams.findIndex(s => s.id === activeStream.id) + 1} –∏–∑ {allStreams.length})
                                </span>
                            )}
                        </h2>

                        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å—Ç—Ä–∏–º–æ–≤ */}
                        {allStreams.length > 1 && (
                            <div className="stream-selector">
                                {allStreams.map((stream, index) => (
                                    <button
                                        key={stream.id}
                                        className={`stream-btn ${activeStream?.id === stream.id ? 'active' : ''}`}
                                        onClick={() => setActiveStream(stream)}
                                        title={stream.title}
                                    >
                                        –ü–æ—Ç–æ–∫ {index + 1}
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                    <HLSPlayer stream={activeStream} />

                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å—Ç—Ä–∏–º–µ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
                    <div className="stream-info-panel">
                        {activeStream && (
                            <div className="current-stream-info">
                                <h3>{activeStream.title}</h3>
                                <div className="stream-details">
                                    <span className="stream-status">
                                        <span className="status-dot"></span>
                                        {getStreamStatusText(activeStream.status)}
                                    </span>
                                    {(activeStream.viewers || 0) > 0 && (
                                        <span className="stream-viewers">
                                            üë• {activeStream.viewers || 0} –∑—Ä–∏—Ç–µ–ª–µ–π
                                        </span>
                                    )}
                                </div>
                            </div>
                        )}

                        {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —ç—Ñ–∏—Ä–æ–≤ */}
                        {false && (
                            <div className="upcoming-schedule">
                                <h3 className="schedule-title">
                                    üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π
                                </h3>

                                {upcomingStreams.length > 0 ? (
                                    <div className="schedule-list">
                                        {upcomingStreams.slice(0, 4).map((stream) => (
                                            <div key={stream.id} className="schedule-item">
                                                <div className="schedule-time">
                                                    <div className="schedule-date">
                                                        {formatStreamDate(stream.startTime!)}
                                                    </div>
                                                    <div className="schedule-clock">
                                                        {formatStreamTime(stream.startTime!)}
                                                    </div>
                                                </div>
                                                <div className="schedule-content">
                                                    <div className="schedule-title-text">
                                                        {stream.title}
                                                    </div>
                                                    <div className="schedule-status">
                                                        <span className="status-badge upcoming-badge">
                                                            {getStreamStatusText(stream.status)}
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        ))}

                                        {upcomingStreams.length > 4 && (
                                            <div className="schedule-more">
                                                <Link to="/schedule" className="schedule-more-link">
                                                    –ï—â—ë {upcomingStreams.length - 4} —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π ‚Üí
                                                </Link>
                                            </div>
                                        )}
                                    </div>
                                ) : (
                                    <div className="no-upcoming">
                                        <p>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π</p>
                                    </div>
                                )}
                            </div>)}
                    </div>
                </div>

                {/* –ë–ª–∏–∂–∞–π—à–∏–π –º–∞—Ç—á –Ω–∞ —Ñ–æ–Ω–µ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è */}
                {/* {upcomingFootballMatches.length > 0 && (
                    <div className="featured-match-section">
                        <h2>–ë–ª–∏–∂–∞–π—à–∏–π –º–∞—Ç—á</h2>
                        <FootballMatchCard
                            match={upcomingFootballMatches[0]}
                            onClick={handleMatchClick}
                            isSelected={selectedMatch?.id === upcomingFootballMatches[0].id}
                            isMainCard={true}
                        />
                    </div>
                )} */}

                {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ–∏—Ä—ã */}
                {activeLiveMatches.length > 0 && (
                    <>
                        {/* –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä */}
                        {selectedMatch && selectedMatch.isLive && (
                            <div className="player-section">
                                <div className="player-header">
                                    <div className="player-title">
                                        <h2>{selectedMatch.player1} vs {selectedMatch.player2}</h2>
                                        <div className="player-meta">
                                            <span className="tournament">{selectedMatch.tournament}</span>
                                            <span className="live-indicator">
                                                <span className="live-dot"></span>
                                                –ü–†–Ø–ú–û–ô –≠–§–ò–†
                                            </span>
                                        </div>
                                    </div>
                                    <button className="close-player" onClick={closePlayer} title="–ó–∞–∫—Ä—ã—Ç—å –ø–ª–µ–µ—Ä">
                                        ‚úï
                                    </button>
                                </div>
                                <MatchPlayer
                                    match={selectedMatch}
                                    isMainPlayer={true}
                                />
                            </div>
                        )}

                        {/* –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ–∏—Ä–æ–≤ */}
                        <div className="live-streams-section">
                            <h2>–ü—Ä—è–º—ã–µ —ç—Ñ–∏—Ä—ã</h2>
                            <div className="matches-grid">
                                {activeLiveMatches.map((match: Match) => (
                                    <FootballMatchCard
                                        key={match.id}
                                        match={match}
                                        onClick={handleMatchClick}
                                        isSelected={selectedMatch?.id === match.id}
                                    />
                                ))}
                            </div>
                        </div>
                    </>
                )}

                {/* –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ */}
                {/* {otherUpcomingMatches.length > 0 && (
                    <div className="upcoming-matches-section">
                        <h2>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏</h2>
                        <div className="matches-grid">
                            {otherUpcomingMatches.map((match: Match) => (
                                <FootballMatchCard
                                    key={match.id}
                                    match={match}
                                    onClick={handleMatchClick}
                                    isSelected={selectedMatch?.id === match.id}
                                />
                            ))}
                        </div>
                    </div>
                )} */}

                {/* –°–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –º–∞—Ç—á–µ–π */}
                {activeLiveMatches.length === 0 && upcomingFootballMatches.length === 0 && (
                    <div className="no-matches">
                        <div className="no-matches-content">
                            <h3>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π</h3>
                            <p>–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–π</p>
                            <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ <Link to="/schedule">—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</Link> –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π</p>
                        </div>
                    </div>
                )}
            </main>
        </div>
    );
};

export default Home;
