import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { AdData } from '../components/AdBanner';
import { getAds, createAd as apiCreateAd, updateAd as apiUpdateAd, deleteAd as apiDeleteAd, activateAd, deactivateAd, CreateAdDto } from '../api';

interface AdsContextType {
    ads: AdData[];
    leftSideAds: AdData[];
    rightSideAds: AdData[];
    horizontalAds: AdData[];
    addAd: (ad: Omit<AdData, 'id'>) => void;
    updateAd: (id: string, updates: Partial<AdData>) => void;
    deleteAd: (id: string) => void;
    toggleAdStatus: (id: string) => void;
    loadAds: () => Promise<void>;
}

const AdsContext = createContext<AdsContextType | undefined>(undefined);

export const useAds = () => {
    const context = useContext(AdsContext);
    if (!context) {
        throw new Error('useAds must be used within an AdsProvider');
    }
    return context;
};

interface AdsProviderProps {
    children: ReactNode;
}

export const AdsProvider: React.FC<AdsProviderProps> = ({ children }) => {
    const [ads, setAds] = useState<AdData[]>([]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–ª–∞–º—É —Å API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    useEffect(() => {
        loadAds();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è AdData –≤ CreateAdDto
    const convertAdToDto = (ad: Omit<AdData, 'id'> | Partial<AdData>): CreateAdDto => {
        return {
            title: ad.title || '',
            type: ad.type || 'vertical',
            position: ad.type === 'horizontal' ? 'header' : 'sidebar',
            imageUrl: ad.imageUrl || ad.gifUrl || '',
            clickUrl: ad.clickUrl || '',
            startDate: new Date().toISOString(),
            endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // +1 –≥–æ–¥
            priority: 1,
            targetAudience: 'sports'
        };
    };

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è API –¥–∞–Ω–Ω—ã—Ö –≤ AdData
    const convertApiToAd = (apiAd: any): AdData => {
        return {
            id: apiAd.id.toString(),
            title: apiAd.title,
            type: apiAd.type || 'vertical',
            imageUrl: apiAd.imageUrl || '',
            gifUrl: apiAd.imageUrl || '',
            clickUrl: apiAd.clickUrl || '',
            isActive: apiAd.status === 'active',
            priority: apiAd.priority || 1,
            startDate: apiAd.startDate,
            endDate: apiAd.endDate,
            position: apiAd.position || (apiAd.type === 'horizontal' ? 'header' : 'sidebar')
        };
    };

    const loadAds = async () => {
        try {
            const response = await getAds();
            console.log('üì• –û—Ç–≤–µ—Ç API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–ª–∞–º—ã:', response.data);

            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"ads": [...], "total": 6}
            const apiAds = response.data?.ads?.map(convertApiToAd) || [];
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', apiAds);

            setAds(apiAds);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–ª–∞–º—ã —Å API:', error);
            setAds([]);
        }
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º—ã –ø–æ —Ç–∏–ø–∞–º –∏ –ø–æ–∑–∏—Ü–∏—è–º
    const leftSideAds = ads.filter(ad => ad.isActive && (ad.type === 'vertical' || ad.type === 'square'));
    const rightSideAds = ads.filter(ad => ad.isActive && (ad.type === 'vertical' || ad.type === 'square'));
    const horizontalAds = ads.filter(ad => ad.isActive && ad.type === 'horizontal');

    const addAd = async (adData: Omit<AdData, 'id'>) => {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            const dto = convertAdToDto(adData);
            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:', dto);

            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
            const response = await apiCreateAd(dto);
            console.log('‚úÖ –û—Ç–≤–µ—Ç API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', response.data);

            // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const newAd: AdData = {
                ...adData,
                id: (response.data?.ad?.id || response.data?.id || Date.now()).toString(),
                isActive: false // –ù–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è
            };
            setAds(prev => [...prev, newAd]);

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await loadAds();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã —á–µ—Ä–µ–∑ API:', error);
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
            const newAd: AdData = {
                ...adData,
                id: Date.now().toString(),
            };
            setAds(prev => [...prev, newAd]);
        }
    };

    const updateAd = async (id: string, updates: Partial<AdData>) => {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            const dto = convertAdToDto(updates);
            // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
            await apiUpdateAd(id, dto);
            // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setAds(prev => prev.map(ad =>
                ad.id === id ? { ...ad, ...updates } : ad
            ));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã —á–µ—Ä–µ–∑ API:', error);
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
            setAds(prev => prev.map(ad =>
                ad.id === id ? { ...ad, ...updates } : ad
            ));
        }
    };

    const deleteAd = async (id: string) => {
        try {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ API
            await apiDeleteAd(id);
            // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setAds(prev => prev.filter(ad => ad.id !== id));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã —á–µ—Ä–µ–∑ API:', error);
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
            setAds(prev => prev.filter(ad => ad.id !== id));
        }
    };

    const toggleAdStatus = async (id: string) => {
        const ad = ads.find(a => a.id === id);
        if (!ad) return;

        try {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
            if (ad.isActive) {
                await deactivateAd(id);
            } else {
                await activateAd(id);
            }
            // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setAds(prev => prev.map(a =>
                a.id === id ? { ...a, isActive: !a.isActive } : a
            ));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–ª–∞–º—ã —á–µ—Ä–µ–∑ API:', error);
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
            setAds(prev => prev.map(a =>
                a.id === id ? { ...a, isActive: !a.isActive } : a
            ));
        }
    };

    return (
        <AdsContext.Provider value={{
            ads,
            leftSideAds,
            rightSideAds,
            horizontalAds,
            addAd,
            updateAd,
            deleteAd,
            toggleAdStatus,
            loadAds
        }}>
            {children}
        </AdsContext.Provider>
    );
};
