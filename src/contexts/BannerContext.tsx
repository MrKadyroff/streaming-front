import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { BannerData } from '../components/PromoBanner';
import { getAds, createAd as apiCreateAd, updateAd as apiUpdateAd, deleteAd as apiDeleteAd, activateAd, deactivateAd, CreateAdDto } from '../api';

interface AdsContextType {
    ads: BannerData[];
    leftSideAds: BannerData[];
    rightSideAds: BannerData[];
    horizontalAds: BannerData[];
    addAd: (banner: Omit<BannerData, 'id'>) => void;
    updateAd: (id: string, updates: Partial<BannerData>) => void;
    deleteAd: (id: string) => void;
    toggleAdStatus: (id: string) => void;
    loadAds: () => Promise<void>;
}

const AdsContext = createContext<AdsContextType | undefined>(undefined);

export const useAds = () => {
    const context = useContext(AdsContext);
    if (!context) {
        throw new Error('useAds must be used within an AdsProvider');
    }
    return context;
};

interface AdsProviderProps {
    children: ReactNode;
}

export const AdsProvider: React.FC<AdsProviderProps> = ({ children }) => {
    const [ads, setAds] = useState<BannerData[]>([]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∫–ª–∞–º—É —Å API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    useEffect(() => {
        loadAds();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è BannerData –≤ CreateAdDto
    const convertBannerToDto = (banner: Omit<BannerData, 'id'> | Partial<BannerData>): CreateAdDto => {
        return {
            title: banner.title || '',
            type: banner.type || 'vertical',
            position: banner.type === 'horizontal' ? 'header' : 'sidebar',
            imageUrl: banner.imageUrl || banner.gifUrl || '',
            clickUrl: banner.clickUrl || '',
            startDate: new Date().toISOString(),
            endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // +1 –≥–æ–¥
            priority: 1,
            targetAudience: 'sports'
        };
    };

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è API –¥–∞–Ω–Ω—ã—Ö –≤ BannerData
    const convertApiToBanner = (apiData: any): BannerData => {
        return {
            id: apiData.id.toString(),
            title: apiData.title,
            type: apiData.type || 'vertical',
            imageUrl: apiData.imageUrl || '',
            gifUrl: apiData.imageUrl || '',
            clickUrl: apiData.clickUrl || '',
            isActive: apiData.status === 'active',
            priority: apiData.priority || 1,
            startDate: apiData.startDate,
            endDate: apiData.endDate,
            position: apiData.position || (apiData.type === 'horizontal' ? 'header' : 'sidebar')
        };
    };

    const loadAds = async () => {
        try {
            const response = await getAds();
            console.log('üì• –û—Ç–≤–µ—Ç API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–ª–∞–º—ã:', response.data);

            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"ads": [...], "total": 6}
            const apiBanners = response.data?.ads?.map(convertApiToBanner) || [];
            console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', apiBanners);

            setAds(apiBanners);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–ª–∞–º—ã —Å API:', error);
            setAds([]);
        }
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º—ã –ø–æ —Ç–∏–ø–∞–º –∏ –ø–æ–∑–∏—Ü–∏—è–º
    const leftSideAds = ads.filter(banner => banner.isActive && (banner.type === 'vertical' || banner.type === 'square'));
    const rightSideAds = ads.filter(banner => banner.isActive && (banner.type === 'vertical' || banner.type === 'square'));
    const horizontalAds = ads.filter(banner => banner.isActive && banner.type === 'horizontal');

    // –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log('üîç –¢–µ–∫—É—â–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:', ads);
    console.log('üîç –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', leftSideAds);
    console.log('üîç –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', rightSideAds);
    console.log('üîç –ê–∫—Ç–∏–≤–Ω—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:', horizontalAds);

    const addAd = async (bannerData: Omit<BannerData, 'id'>) => {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            const dto = convertBannerToDto(bannerData);
            console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã:', dto);

            // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
            const response = await apiCreateAd(dto);
            console.log('‚úÖ –û—Ç–≤–µ—Ç API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏:', response.data);

            // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const newBanner: BannerData = {
                ...bannerData,
                id: (response.data?.ad?.id || response.data?.id || Date.now()).toString(),
                isActive: false // –ù–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è
            };
            setAds(prev => [...prev, newBanner]);

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            await loadAds();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã —á–µ—Ä–µ–∑ API:', error);
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
            const newBanner: BannerData = {
                ...bannerData,
                id: Date.now().toString(),
            };
            setAds(prev => [...prev, newBanner]);
        }
    };

    const updateAd = async (id: string, updates: Partial<BannerData>) => {
        try {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
            const dto = convertBannerToDto(updates);
            // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ API
            await apiUpdateAd(id, dto);
            // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setAds(prev => prev.map(banner =>
                banner.id === id ? { ...banner, ...updates } : banner
            ));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã —á–µ—Ä–µ–∑ API:', error);
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
            setAds(prev => prev.map(banner =>
                banner.id === id ? { ...banner, ...updates } : banner
            ));
        }
    };

    const deleteAd = async (id: string) => {
        try {
            // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ API
            await apiDeleteAd(id);
            // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            setAds(prev => prev.filter(banner => banner.id !== id));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã —á–µ—Ä–µ–∑ API:', error);
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
            setAds(prev => prev.filter(banner => banner.id !== id));
        }
    };

    const toggleAdStatus = async (id: string) => {
        const banner = ads.find(b => b.id === id);
        if (!banner) return;

        try {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
            if (banner.isActive) {
                await deactivateAd(id);
            } else {
                await activateAd(id);
            }
            // –ó–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setAds(prev => prev.map(b =>
                b.id === id ? { ...b, isActive: !b.isActive } : b
            ));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∫–ª–∞–º—ã —á–µ—Ä–µ–∑ API:', error);
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ
            setAds(prev => prev.map(b =>
                b.id === id ? { ...b, isActive: !b.isActive } : b
            ));
        }
    };

    return (
        <AdsContext.Provider value={{
            ads,
            leftSideAds,
            rightSideAds,
            horizontalAds,
            addAd,
            updateAd,
            deleteAd,
            toggleAdStatus,
            loadAds
        }}>
            {children}
        </AdsContext.Provider>
    );
};
